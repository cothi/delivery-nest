// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                  @id @default(uuid())
  email                  String                  @unique
  nickname               String
  password               String
  userRoles              UserRole[]
  restaurants            Restaurant[]
  orders                 Order[]
  deliveries             Delivery[]
  deliveryPersonLocation DeliveryPersonLocation?
}

model UserRole {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  role   Role   @default(CUSTOMER)

  @@unique([userId, role])
}

model Restaurant {
  id           String        @id @default(uuid())
  address      String
  name         String
  phone        String
  owner        User          @relation(fields: [ownerId], references: [id])
  ownerId      String
  foodCategory FoodCategory?
  foods        Food[]
  orders       Order[]
}

model FoodCategory {
  id           String     @id @default(uuid())
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String     @unique
  name         String
  foods        Food[]
}

model Food {
  id             String       @id @default(uuid())
  foodCategory   FoodCategory @relation(fields: [foodCategoryId], references: [id])
  foodCategoryId String
  name           String
  price          Float
  description    String
  mainPhotoUrl   String
  restaurant     Restaurant   @relation(fields: [restaurantId], references: [id])
  restaurantId   String
  OrderFood      OrderFood[]
}

model Order {
  id           String      @id @default(uuid())
  customer     User        @relation(fields: [customerId], references: [id])
  customerId   String
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId String
  totalAmount  Float
  status       OrderStatus @default(PENDING)
  orderFoods   OrderFood[]
  delivery     Delivery?
  payment      Payment?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model OrderFood {
  id       String @id @default(uuid())
  food     Food   @relation(fields: [foodId], references: [id])
  foodId   String
  order    Order  @relation(fields: [orderId], references: [id])
  orderId  String
  quantity Int
}

model Delivery {
  id                     String                  @id @default(uuid())
  order                  Order                   @relation(fields: [orderId], references: [id])
  orderId                String                  @unique
  deliveryPerson         String                  @unique
  deliveryPersonId       String
  status                 DeliveryStatus          @default(PENDING)
  User                   User?                   @relation(fields: [userId], references: [id])
  userId                 String?
  DeliveryPersonLocation DeliveryPersonLocation?
}

model DeliveryPersonLocation {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique
  delivery   Delivery @relation(fields: [deliveryId], references: [id])
  deliveryId String   @unique
  latitude   Float
  longtitude Float
  updatedAt  DateTime @updatedAt
}

model Payment {
  id            String        @id @default(uuid())
  order         Order         @relation(fields: [orderId], references: [id])
  orderId       String        @unique
  amount        Float
  status        PaymentStatus @default(PENDING)
  paymentMethod String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY_FOR_PICKUP
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum DeliveryStatus {
  PENDING
  ACCEPTED
  PICKED_UP
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum Role {
  CUSTOMER
  RESTAURANT_OWNER
  DELIVERY_PERSON
}
